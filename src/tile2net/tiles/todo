with logging_redirect_tqdm():
    for i, (input_images, labels, img_names, scale_float) in enumerate(tqdm(loader)):
        if i % 20 == 0:
            logger.debug(f'Inference [Iter: {i + 1} / {len(loader)}]')

Tiles

SourceTiles
    - stitch to inference tiles aggregates source tiles
SegTiles
    - stitch to network tiles aggregates inference tiles
    - does not write polygons
NetworkTiles
    - generates polygons for each network tile
    - from polygons creates network tiles
    - each tile is a separate multiprocessing worker

source -> inference -> network

SourceTiles.stitch() -> SegTiles
SegTiles.stitch() -> NetworkTiles

pad.

InTiles.stitch() -> SegTiles
SegTiles.stitch() -> VecTiles

previously, mosaic.xtile and mosaic.ytile were easy because they were 1-to-1 mappings and therefore columns
now, each xtile and ytile can belong to two mosaics

can't use mosaic(frame) because we need to first access lengt,


pred.xtile
out.xtile

padded inherits from

each tile subclass should get its own self.static so it can get self.static.black

predict.py
mask2poly.py
minibatch.py

todo: segtiles.stitch() -> vectiles requires padding intiles once more

intiles.stitch() -> intiles
segtiles.stitch() -> intiles

add cfg.stitch.dimension to cfg

segtiles.predict
.vectiles.vectorize

if intiles:
    dimension is from sample

Tile descriptor has possibly bug if it's accessed for another class while in it
return a copy

predtiles stitches when files is accessed

1   2   4   8   16
3   4   6   10  18
