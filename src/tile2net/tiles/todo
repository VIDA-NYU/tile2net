reminder about: https://shapely.readthedocs.io/en/latest/reference/shapely.remove_repeated_points.html

with logging_redirect_tqdm():

    for i, (input_images, labels, img_names, scale_float) in enumerate(tqdm(loader)):
        if i % 20 == 0:
            logger.debug(f'Inference [Iter: {i + 1} / {len(loader)}]')

Tiles

SourceTiles
    - stitch to inference tiles aggregates source tiles
SegTiles
    - stitch to network tiles aggregates inference tiles
    - does not write polygons
NetworkTiles
    - generates polygons for each network tile
    - from polygons creates network tiles
    - each tile is a separate multiprocessing worker

source -> inference -> network

SourceTiles.stitch() -> SegTiles
SegTiles.stitch() -> NetworkTiles

pad.

InTiles.stitch() -> SegTiles
SegTiles.stitch() -> VecTiles

previously, mosaic.xtile and mosaic.ytile were easy because they were 1-to-1 mappings and therefore columns
now, each xtile and ytile can belong to two mosaics

can't use mosaic(frame) because we need to first access lengt,


pred.xtile
out.xtile

padded inherits from
each tile subclass should get its own self.static so it can get self.static.black

predict.py
mask2poly.py

minibatch.py

todo: segtiles.stitch() -> vectiles requires padding intiles once more

intiles.stitch() -> intiles
segtiles.stitch() -> intiles

add cfg.stitch.dimension to cfg


Tile descriptor has possibly bug if it's accessed for another class while in it
return a copy


We can use something like the majority vote + confidence mask to force the labels of the pixels with low confidence into the same label as their neighbors starting from like 50 pixels away from the edge

add a changelog
we should have vectiles.prediction and vectiles.mask
we must dissolve before simplifying

if exterior length along road < threshold
and buffer is between two sidewalks
and exterior length doesn't change > 90 degrees
fill the gap

allow cfging  max_workers for vectorization

set_source(outdir='./boston')

set_indir(...)
set_outdir(...)
what if they want to  set outdir after setting indir?

vectiles.infile and segtiles.infile must share the same extension as intiles.infile

What if extension is passed but not xy?

indir should not require extension on the files

stitch loader should still use threading within a process if a lot of small tiles in the big tile

investigat submission
            # loc = tiles.vectile.xtile == 4963
            # loc &= tiles.vectiles.ytile == 6057

must be stitch segtiles.grayscale -> vectiles.grayscale

lines
polygons
