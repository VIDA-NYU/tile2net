with logging_redirect_tqdm():
    for i, (input_images, labels, img_names, scale_float) in enumerate(tqdm(loader)):
        if i % 20 == 0:
            logger.debug(f'Inference [Iter: {i + 1} / {len(loader)}]')

Tiles

SourceTiles
    - stitch to inference tiles aggregates source tiles
SegTiles
    - stitch to network tiles aggregates inference tiles
    - does not write polygons
NetworkTiles
    - generates polygons for each network tile
    - from polygons creates network tiles
    - each tile is a separate multiprocessing worker

source -> inference -> network

SourceTiles.stitch() -> SegTiles
SegTiles.stitch() -> NetworkTiles

pad.

InTiles.stitch() -> SegTiles
SegTiles.stitch() -> VecTiles

previously, mosaic.xtile and mosaic.ytile were easy because they were 1-to-1 mappings and therefore columns
now, each xtile and ytile can belong to two mosaics

can't use mosaic(frame) because we need to first access lengt,


pred.xtile
out.xtile

padded inherits from
each tile subclass should get its own self.static so it can get self.static.black

predict.py
mask2poly.py

minibatch.py

todo: segtiles.stitch() -> vectiles requires padding intiles once more

intiles.stitch() -> intiles
segtiles.stitch() -> intiles

add cfg.stitch.dimension to cfg


Tile descriptor has possibly bug if it's accessed for another class while in it
return a copy


We can use something like the majority vote + confidence mask to force the labels of the pixels with low confidence into the same label as their neighbors starting from like 50 pixels away from the edge

from_slice

downscale to segtile.scale
[x-1, y-1, x+1, y+1]

frame.corners(scale=segtile.scale)

we must figure out how to pad

infiles.padded
scales to largest, adds padding=1 using corners, scales back

infiles padded with segtiles.scale
segtiles padded with segtiles.scale

for broadcasting:

vectiles.corners.to_scale(segtiles.scale)

so we need:
    corners.ntiles -> corners.tile.area
    corners.to_scale(scale)

corners.to_tiles()

check if polygon simplification is a necessary step

lines.explode()

how to keep segtiles.padded?



compare

add a changelog
shapely.errors.GEOSException: TopologyException: unable to assign free hole to a shell at -7921395.5664562527 5199966.2301127482

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/arstneio/.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/concurrent/futures/process.py", line 261, in _process_worker
    r = call_item.fn(*call_item.args, **call_item.kwargs)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/arstneio/PycharmProjects/tile2net/src/tile2net/tiles/vectiles/vectiles.py", line 326, in _vectorize_submit
    raise RuntimeError(msg) from e
RuntimeError: Error vectorizing '/home/arstneio/PycharmProjects/tile2net/src/boston/vectiles/19/4953_6065.png': TopologyException: unable to assign free hole to a shell at -7921395.5664562527 5199966.2301127482
